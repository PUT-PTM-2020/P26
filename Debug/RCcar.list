
RCcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004490  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004630  08004630  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004638  08004638  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  08004650  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004650  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5eb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c2c  00000000  00000000  0002c62b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0002e258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209cb  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000997d  00000000  00000000  0005058b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca079  00000000  00000000  00059f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  00123ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004600 	.word	0x08004600

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004600 	.word	0x08004600

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fbd0 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f878 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f9b6 	bl	8001024 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cb8:	f000 f8de 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f92e 	bl	8000f1c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000cc0:	f000 f986 	bl	8000fd0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Start ADC in Interrupt
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	482e      	ldr	r0, [pc, #184]	; (8000d80 <main+0xd8>)
 8000cc8:	f002 f8cc 	bl	8002e64 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <main+0xdc>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	492d      	ldr	r1, [pc, #180]	; (8000d88 <main+0xe0>)
 8000cd4:	482d      	ldr	r0, [pc, #180]	; (8000d8c <main+0xe4>)
 8000cd6:	f002 fe56 	bl	8003986 <HAL_UART_Receive_IT>
	 	  if(receiveUART[0] == '1'){
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <main+0xe0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b31      	cmp	r3, #49	; 0x31
 8000ce0:	d106      	bne.n	8000cf0 <main+0x48>
	 		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4829      	ldr	r0, [pc, #164]	; (8000d90 <main+0xe8>)
 8000cea:	f001 fc13 	bl	8002514 <HAL_GPIO_WritePin>
 8000cee:	e009      	b.n	8000d04 <main+0x5c>
	 	  }
	 	  else if(receiveUART[0] == '0'){
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <main+0xe0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b30      	cmp	r3, #48	; 0x30
 8000cf6:	d105      	bne.n	8000d04 <main+0x5c>
	 		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	4824      	ldr	r0, [pc, #144]	; (8000d90 <main+0xe8>)
 8000d00:	f001 fc08 	bl	8002514 <HAL_GPIO_WritePin>
	 	  }

	  HAL_ADC_Start(&hadc1);
 8000d04:	4823      	ldr	r0, [pc, #140]	; (8000d94 <main+0xec>)
 8000d06:	f000 fc59 	bl	80015bc <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000d0a:	210a      	movs	r1, #10
 8000d0c:	4821      	ldr	r0, [pc, #132]	; (8000d94 <main+0xec>)
 8000d0e:	f000 fd1b 	bl	8001748 <HAL_ADC_PollForConversion>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1d9      	bne.n	8000ccc <main+0x24>
	  	  		{
	  	  			value = HAL_ADC_GetValue(&hadc1);
 8000d18:	481e      	ldr	r0, [pc, #120]	; (8000d94 <main+0xec>)
 8000d1a:	f000 feda 	bl	8001ad2 <HAL_ADC_GetValue>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fb93 	bl	800044c <__aeabi_ui2d>
 8000d26:	4603      	mov	r3, r0
 8000d28:	460c      	mov	r4, r1
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <main+0xf0>)
 8000d2c:	e9c2 3400 	strd	r3, r4, [r2]
	  	  			toServo = (value / 68.25) + 90;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <main+0xf0>)
 8000d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d36:	a310      	add	r3, pc, #64	; (adr r3, 8000d78 <main+0xd0>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fd2a 	bl	8000794 <__aeabi_ddiv>
 8000d40:	4603      	mov	r3, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	4618      	mov	r0, r3
 8000d46:	4621      	mov	r1, r4
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <main+0xf4>)
 8000d4e:	f7ff fa41 	bl	80001d4 <__adddf3>
 8000d52:	4603      	mov	r3, r0
 8000d54:	460c      	mov	r4, r1
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <main+0xf8>)
 8000d58:	e9c2 3400 	strd	r3, r4, [r2]
	  	  			htim2.Instance->CCR1 = toServo;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <main+0xf8>)
 8000d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <main+0xd8>)
 8000d64:	6815      	ldr	r5, [r2, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	4621      	mov	r1, r4
 8000d6a:	f7ff fdfb 	bl	8000964 <__aeabi_d2uiz>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	636b      	str	r3, [r5, #52]	; 0x34
	  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000d72:	e7ab      	b.n	8000ccc <main+0x24>
 8000d74:	f3af 8000 	nop.w
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	40511000 	.word	0x40511000
 8000d80:	200000bc 	.word	0x200000bc
 8000d84:	20000000 	.word	0x20000000
 8000d88:	200000b8 	.word	0x200000b8
 8000d8c:	20000030 	.word	0x20000030
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	20000070 	.word	0x20000070
 8000d98:	20000108 	.word	0x20000108
 8000d9c:	40568000 	.word	0x40568000
 8000da0:	20000100 	.word	0x20000100

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fc1c 	bl	80045f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <SystemClock_Config+0xcc>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <SystemClock_Config+0xcc>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <SystemClock_Config+0xd0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <SystemClock_Config+0xd0>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e18:	23a8      	movs	r3, #168	; 0xa8
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fb8d 	bl	8002548 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e34:	f000 f956 	bl	80010e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2105      	movs	r1, #5
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fde6 	bl	8002a28 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e62:	f000 f93f 	bl	80010e4 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	; 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <MX_ADC1_Init+0x9c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <MX_ADC1_Init+0xa0>)
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eda:	f000 fb2b 	bl	8001534 <HAL_ADC_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f000 f8fe 	bl	80010e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000efa:	f000 fe15 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f04:	f000 f8ee 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000070 	.word	0x20000070
 8000f14:	40012000 	.word	0x40012000
 8000f18:	0f000001 	.word	0x0f000001

08000f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1679;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f56:	f240 628f 	movw	r2, #1679	; 0x68f
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f6a:	f001 ff4f 	bl	8002e0c <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f000 f8b6 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4619      	mov	r1, r3
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000f88:	f002 fc20 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f92:	f000 f8a7 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000fae:	f002 f89f 	bl	80030f0 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000fb8:	f000 f894 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM2_Init+0xb0>)
 8000fbe:	f000 f933 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000bc 	.word	0x200000bc

08000fd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_USART3_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USART3_UART_Init+0x4c>)
 8001008:	f002 fc70 	bl	80038ec <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 f867 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000030 	.word	0x20000030
 8001020:	40004800 	.word	0x40004800

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_GPIO_Init+0xb8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_GPIO_Init+0xb8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_GPIO_Init+0xb8>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_GPIO_Init+0xb8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <MX_GPIO_Init+0xbc>)
 80010b2:	f001 fa2f 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_GPIO_Init+0xbc>)
 80010d0:	f001 f886 	bl	80021e0 <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_ADC_MspInit+0x8c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12f      	bne.n	80011c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_MspInit+0x90>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <HAL_ADC_MspInit+0x94>)
 80011b2:	f001 f815 	bl	80021e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2012      	movs	r0, #18
 80011bc:	f000 ffb7 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f000 ffd0 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40012000 	.word	0x40012000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d115      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_PWM_MspInit+0x48>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_PWM_MspInit+0x48>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_PWM_MspInit+0x48>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f000 ff8d 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001214:	201c      	movs	r0, #28
 8001216:	f000 ffa6 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d11d      	bne.n	8001286 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_TIM_MspPostInit+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_TIM_MspPostInit+0x68>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_TIM_MspPostInit+0x68>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001276:	2301      	movs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <HAL_TIM_MspPostInit+0x6c>)
 8001282:	f000 ffad 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_UART_MspInit+0x94>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d134      	bne.n	8001324 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_UART_MspInit+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001304:	2307      	movs	r3, #7
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_UART_MspInit+0x9c>)
 8001310:	f000 ff66 	bl	80021e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2027      	movs	r0, #39	; 0x27
 800131a:	f000 ff08 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800131e:	2027      	movs	r0, #39	; 0x27
 8001320:	f000 ff21 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40004800 	.word	0x40004800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020800 	.word	0x40020800

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f8b2 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ADC_IRQHandler+0x10>)
 800139a:	f000 fa59 	bl	8001850 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000070 	.word	0x20000070

080013a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM2_IRQHandler+0x10>)
 80013ae:	f001 fd97 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000bc 	.word	0x200000bc

080013bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USART3_IRQHandler+0x10>)
 80013c2:	f002 fb35 	bl	8003a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000030 	.word	0x20000030

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SystemInit+0x28>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <SystemInit+0x28>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SystemInit+0x28>)
 80013e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ea:	609a      	str	r2, [r3, #8]
#endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001400:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001402:	e003      	b.n	800140c <LoopCopyDataInit>

08001404 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001406:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001408:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800140a:	3104      	adds	r1, #4

0800140c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001410:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001412:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001414:	d3f6      	bcc.n	8001404 <CopyDataInit>
  ldr  r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001418:	e002      	b.n	8001420 <LoopFillZerobss>

0800141a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800141a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800141c:	f842 3b04 	str.w	r3, [r2], #4

08001420 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001422:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001424:	d3f9      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd3 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f003 f8bd 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fc3b 	bl	8000ca8 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001434:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001438:	08004640 	.word	0x08004640
  ldr  r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001440:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001444:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001448:	20000114 	.word	0x20000114

0800144c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <CAN1_RX0_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 fe4d 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe36 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe65 	bl	8002182 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 fe2d 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000004 	.word	0x20000004
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000110 	.word	0x20000110

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000110 	.word	0x20000110

08001534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e033      	b.n	80015b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fdf6 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fbf0 	bl	8001d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e001      	b.n	80015a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Start+0x1a>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e0a5      	b.n	8001722 <HAL_ADC_Start+0x166>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d018      	beq.n	800161e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_ADC_Start+0x174>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_ADC_Start+0x178>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0c9a      	lsrs	r2, r3, #18
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001610:	e002      	b.n	8001618 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d179      	bne.n	8001720 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166a:	d106      	bne.n	800167a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f023 0206 	bic.w	r2, r3, #6
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
 8001678:	e002      	b.n	8001680 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <HAL_ADC_Start+0x17c>)
 800168a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001694:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d12a      	bne.n	80016f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <HAL_ADC_Start+0x180>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d015      	beq.n	80016d8 <HAL_ADC_Start+0x11c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_ADC_Start+0x184>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d105      	bne.n	80016c2 <HAL_ADC_Start+0x106>
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_ADC_Start+0x17c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_ADC_Start+0x188>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d129      	bne.n	8001720 <HAL_ADC_Start+0x164>
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_ADC_Start+0x17c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d823      	bhi.n	8001720 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11c      	bne.n	8001720 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	e013      	b.n	8001720 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_ADC_Start+0x180>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10e      	bne.n	8001720 <HAL_ADC_Start+0x164>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800171e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000004 	.word	0x20000004
 8001734:	431bde83 	.word	0x431bde83
 8001738:	40012300 	.word	0x40012300
 800173c:	40012000 	.word	0x40012000
 8001740:	40012100 	.word	0x40012100
 8001744:	40012200 	.word	0x40012200

08001748 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d113      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001774:	d10b      	bne.n	800178e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e05c      	b.n	8001848 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800178e:	f7ff fec5 	bl	800151c <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001794:	e01a      	b.n	80017cc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d016      	beq.n	80017cc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_ADC_PollForConversion+0x6c>
 80017a4:	f7ff feba 	bl	800151c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d20b      	bcs.n	80017cc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f043 0204 	orr.w	r2, r3, #4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e03d      	b.n	8001848 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d1dd      	bne.n	8001796 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f06f 0212 	mvn.w	r2, #18
 80017e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d123      	bne.n	8001846 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11f      	bne.n	8001846 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800181e:	2b00      	cmp	r3, #0
 8001820:	d111      	bne.n	8001846 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f043 0201 	orr.w	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b02      	cmp	r3, #2
 800186c:	bf0c      	ite	eq
 800186e:	2301      	moveq	r3, #1
 8001870:	2300      	movne	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b20      	cmp	r3, #32
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d049      	beq.n	8001926 <HAL_ADC_IRQHandler+0xd6>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d046      	beq.n	8001926 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d12b      	bne.n	8001916 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d127      	bne.n	8001916 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d119      	bne.n	8001916 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0220 	bic.w	r2, r2, #32
 80018f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f8e8 	bl	8001aec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0212 	mvn.w	r2, #18
 8001924:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b04      	cmp	r3, #4
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d057      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x1b8>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d054      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d139      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800199c:	2b00      	cmp	r3, #0
 800199e:	d12b      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d124      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11d      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d119      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fab3 	bl	8001f64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f06f 020c 	mvn.w	r2, #12
 8001a06:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d017      	beq.n	8001a6a <HAL_ADC_IRQHandler+0x21a>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d014      	beq.n	8001a6a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10d      	bne.n	8001a6a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f850 	bl	8001b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0201 	mvn.w	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d015      	beq.n	8001aca <HAL_ADC_IRQHandler+0x27a>
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0202 	orr.w	r2, r3, #2
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0220 	mvn.w	r2, #32
 8001ab8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f82a 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0220 	mvn.w	r2, #32
 8001ac8:	601a      	str	r2, [r3, #0]
  }
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e105      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x228>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d925      	bls.n	8001ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68d9      	ldr	r1, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4403      	add	r3, r0
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	409a      	lsls	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e022      	b.n	8001be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4403      	add	r3, r0
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d824      	bhi.n	8001c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b05      	subs	r3, #5
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
 8001c36:	e04c      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d824      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	; 0x23
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b23      	subs	r3, #35	; 0x23
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
 8001c88:	e023      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b41      	subs	r3, #65	; 0x41
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	400a      	ands	r2, r1
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	; 0x41
 8001cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_ADC_ConfigChannel+0x234>)
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_ADC_ConfigChannel+0x238>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d109      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_ADC_ConfigChannel+0x238>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d123      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x1e6>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d11b      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d111      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_ADC_ConfigChannel+0x23c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_ADC_ConfigChannel+0x240>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	40012000 	.word	0x40012000
 8001d64:	20000004 	.word	0x20000004
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <ADC_Init+0x1f0>)
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <ADC_Init+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e00f      	b.n	8001e6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0202 	bic.w	r2, r2, #2
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e1b      	ldrb	r3, [r3, #24]
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	035a      	lsls	r2, r3, #13
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e007      	b.n	8001ee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051a      	lsls	r2, r3, #20
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	025a      	lsls	r2, r3, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	029a      	lsls	r2, r3, #10
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d004      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e00c      	b.n	80021d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2205      	movs	r2, #5
 80021bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e16b      	b.n	80024d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 815a 	bne.w	80024ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d00b      	beq.n	800223a <HAL_GPIO_Init+0x5a>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222e:	2b11      	cmp	r3, #17
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0xfc>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b4 	beq.w	80024ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_GPIO_Init+0x308>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <HAL_GPIO_Init+0x308>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_GPIO_Init+0x308>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_GPIO_Init+0x30c>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <HAL_GPIO_Init+0x310>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_GPIO_Init+0x314>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x318>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <HAL_GPIO_Init+0x31c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x320>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x324>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_GPIO_Init+0x328>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x20a>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_GPIO_Init+0x30c>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_GPIO_Init+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244a:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_GPIO_Init+0x330>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_GPIO_Init+0x330>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <HAL_GPIO_Init+0x330>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_GPIO_Init+0x330>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_GPIO_Init+0x330>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_GPIO_Init+0x330>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_GPIO_Init+0x330>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae90 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	3724      	adds	r7, #36	; 0x24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40013800 	.word	0x40013800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021000 	.word	0x40021000
 8002504:	40021400 	.word	0x40021400
 8002508:	40021800 	.word	0x40021800
 800250c:	40021c00 	.word	0x40021c00
 8002510:	40013c00 	.word	0x40013c00

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e25b      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d075      	beq.n	8002652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002566:	4ba3      	ldr	r3, [pc, #652]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00c      	beq.n	800258c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4ba0      	ldr	r3, [pc, #640]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d112      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b9d      	ldr	r3, [pc, #628]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	4b99      	ldr	r3, [pc, #612]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05b      	beq.n	8002650 <HAL_RCC_OscConfig+0x108>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d157      	bne.n	8002650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e236      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x74>
 80025ae:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a90      	ldr	r2, [pc, #576]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e01d      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b8b      	ldr	r3, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a8a      	ldr	r2, [pc, #552]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a87      	ldr	r2, [pc, #540]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025e0:	4b84      	ldr	r3, [pc, #528]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a83      	ldr	r2, [pc, #524]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a80      	ldr	r2, [pc, #512]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ff8c 	bl	800151c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe ff88 	bl	800151c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1fb      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0xc0>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe ff78 	bl	800151c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe ff74 	bl	800151c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1e7      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0xe8>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1bb      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4952      	ldr	r1, [pc, #328]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	e03a      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x2b0>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe ff2d 	bl	800151c <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe ff29 	bl	800151c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e19c      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4940      	ldr	r1, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b3f      	ldr	r3, [pc, #252]	; (80027f8 <HAL_RCC_OscConfig+0x2b0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe ff0c 	bl	800151c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe ff08 	bl	800151c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e17b      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d030      	beq.n	8002794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x2b4>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe feec 	bl	800151c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fee8 	bl	800151c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e15b      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x200>
 8002766:	e015      	b.n	8002794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_RCC_OscConfig+0x2b4>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe fed5 	bl	800151c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002776:	f7fe fed1 	bl	800151c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e144      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80a0 	beq.w	80028e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fe97 	bl	800151c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e011      	b.n	8002816 <HAL_RCC_OscConfig+0x2ce>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	42470000 	.word	0x42470000
 80027fc:	42470e80 	.word	0x42470e80
 8002800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fe8a 	bl	800151c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0fd      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x4d4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x2f0>
 800282a:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a7c      	ldr	r2, [pc, #496]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e01c      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x312>
 8002840:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a76      	ldr	r2, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a73      	ldr	r2, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
 800285a:	4b71      	ldr	r3, [pc, #452]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a70      	ldr	r2, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b6e      	ldr	r3, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a6d      	ldr	r2, [pc, #436]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fe4f 	bl	800151c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fe4b 	bl	800151c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0bc      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCC_OscConfig+0x33a>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fe39 	bl	800151c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fe35 	bl	800151c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0a6      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8092 	beq.w	8002a10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ec:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d05c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d141      	bne.n	8002984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_RCC_OscConfig+0x4dc>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fe09 	bl	800151c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fe05 	bl	800151c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e078      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002920:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	019b      	lsls	r3, r3, #6
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	4933      	ldr	r1, [pc, #204]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x4dc>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fdde 	bl	800151c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fdda 	bl	800151c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04d      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x41c>
 8002982:	e045      	b.n	8002a10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x4dc>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe fdc7 	bl	800151c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fdc3 	bl	800151c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e036      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x44a>
 80029b0:	e02e      	b.n	8002a10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e029      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10d      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	42470060 	.word	0x42470060

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fd00 	bl	800151c <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe fcfc 	bl	800151c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5cd3      	ldrb	r3, [r2, r3]
 8002bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fc60 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08004618 	.word	0x08004618
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x32>
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d008      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x38>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80b4 	bne.w	8002d88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c22:	60bb      	str	r3, [r7, #8]
       break;
 8002c24:	e0b3      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c28:	60bb      	str	r3, [r7, #8]
      break;
 8002c2a:	e0b0      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c36:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04a      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	ea03 0501 	and.w	r5, r3, r1
 8002c58:	ea04 0602 	and.w	r6, r4, r2
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4632      	mov	r2, r6
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	0154      	lsls	r4, r2, #5
 8002c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c6e:	014b      	lsls	r3, r1, #5
 8002c70:	4619      	mov	r1, r3
 8002c72:	4622      	mov	r2, r4
 8002c74:	1b49      	subs	r1, r1, r5
 8002c76:	eb62 0206 	sbc.w	r2, r2, r6
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f04f 0400 	mov.w	r4, #0
 8002c82:	0194      	lsls	r4, r2, #6
 8002c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c88:	018b      	lsls	r3, r1, #6
 8002c8a:	1a5b      	subs	r3, r3, r1
 8002c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	00e2      	lsls	r2, r4, #3
 8002c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c9e:	00d9      	lsls	r1, r3, #3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	195b      	adds	r3, r3, r5
 8002ca6:	eb44 0406 	adc.w	r4, r4, r6
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	0262      	lsls	r2, r4, #9
 8002cb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cb8:	0259      	lsls	r1, r3, #9
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	f7fd fe6a 	bl	80009a4 <__aeabi_uldivmod>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e049      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	ea03 0501 	and.w	r5, r3, r1
 8002cee:	ea04 0602 	and.w	r6, r4, r2
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f04f 0400 	mov.w	r4, #0
 8002cfe:	0154      	lsls	r4, r2, #5
 8002d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d04:	014b      	lsls	r3, r1, #5
 8002d06:	4619      	mov	r1, r3
 8002d08:	4622      	mov	r2, r4
 8002d0a:	1b49      	subs	r1, r1, r5
 8002d0c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0194      	lsls	r4, r2, #6
 8002d1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d1e:	018b      	lsls	r3, r1, #6
 8002d20:	1a5b      	subs	r3, r3, r1
 8002d22:	eb64 0402 	sbc.w	r4, r4, r2
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d34:	00d9      	lsls	r1, r3, #3
 8002d36:	460b      	mov	r3, r1
 8002d38:	4614      	mov	r4, r2
 8002d3a:	195b      	adds	r3, r3, r5
 8002d3c:	eb44 0406 	adc.w	r4, r4, r6
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	02a2      	lsls	r2, r4, #10
 8002d4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d4e:	0299      	lsls	r1, r3, #10
 8002d50:	460b      	mov	r3, r1
 8002d52:	4614      	mov	r4, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	4621      	mov	r1, r4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4623      	mov	r3, r4
 8002d62:	f7fd fe1f 	bl	80009a4 <__aeabi_uldivmod>
 8002d66:	4603      	mov	r3, r0
 8002d68:	460c      	mov	r4, r1
 8002d6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	60bb      	str	r3, [r7, #8]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d8a:	60bb      	str	r3, [r7, #8]
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000004 	.word	0x20000004

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff0 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a9b      	lsrs	r3, r3, #10
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08004628 	.word	0x08004628

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de8:	f7ff ffdc 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dec:	4601      	mov	r1, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0b5b      	lsrs	r3, r3, #13
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08004628 	.word	0x08004628

08002e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e01d      	b.n	8002e5a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe f9d2 	bl	80011dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 fa48 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fc82 	bl	8003780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_TIM_PWM_Start+0x74>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x2c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_TIM_PWM_Start+0x78>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x30>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_TIM_PWM_Start+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d007      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9be 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f9b0 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9c1 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f994 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f986 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f997 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f96a 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f95c 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f96d 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f940 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f932 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f943 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f90c 	bl	800327c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fc24 	bl	80038d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f908 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0220 	mvn.w	r2, #32
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fbee 	bl	80038c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003106:	2302      	movs	r3, #2
 8003108:	e0b4      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x184>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	f200 809f 	bhi.w	8003260 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003261 	.word	0x08003261
 8003130:	08003261 	.word	0x08003261
 8003134:	08003261 	.word	0x08003261
 8003138:	0800319d 	.word	0x0800319d
 800313c:	08003261 	.word	0x08003261
 8003140:	08003261 	.word	0x08003261
 8003144:	08003261 	.word	0x08003261
 8003148:	080031df 	.word	0x080031df
 800314c:	08003261 	.word	0x08003261
 8003150:	08003261 	.word	0x08003261
 8003154:	08003261 	.word	0x08003261
 8003158:	0800321f 	.word	0x0800321f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f95c 	bl	8003420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
      break;
 800319a:	e062      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f9ac 	bl	8003500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
      break;
 80031dc:	e041      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa01 	bl	80035ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0208 	orr.w	r2, r2, #8
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0204 	bic.w	r2, r2, #4
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
      break;
 800321c:	e021      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fa55 	bl	80036d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	021a      	lsls	r2, r3, #8
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	61da      	str	r2, [r3, #28]
      break;
 800325e:	e000      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003260:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3d      	ldr	r2, [pc, #244]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d027      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d023      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <TIM_Base_SetConfig+0x128>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <TIM_Base_SetConfig+0x12c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <TIM_Base_SetConfig+0x130>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a25      	ldr	r2, [pc, #148]	; (8003414 <TIM_Base_SetConfig+0x134>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a24      	ldr	r2, [pc, #144]	; (8003418 <TIM_Base_SetConfig+0x138>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <TIM_Base_SetConfig+0x13c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <TIM_Base_SetConfig+0x124>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40010400 	.word	0x40010400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800
 8003414:	40001800 	.word	0x40001800
 8003418:	40001c00 	.word	0x40001c00
 800341c:	40002000 	.word	0x40002000

08003420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 0302 	bic.w	r3, r3, #2
 8003468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <TIM_OC1_SetConfig+0xd8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC1_SetConfig+0x64>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <TIM_OC1_SetConfig+0xdc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10c      	bne.n	800349e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0308 	bic.w	r3, r3, #8
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <TIM_OC1_SetConfig+0xd8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_OC1_SetConfig+0x8e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <TIM_OC1_SetConfig+0xdc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d111      	bne.n	80034d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40010400 	.word	0x40010400

08003500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f023 0210 	bic.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0320 	bic.w	r3, r3, #32
 800354a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <TIM_OC2_SetConfig+0xe4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC2_SetConfig+0x68>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <TIM_OC2_SetConfig+0xe8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10d      	bne.n	8003584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <TIM_OC2_SetConfig+0xe4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_OC2_SetConfig+0x94>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <TIM_OC2_SetConfig+0xe8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d113      	bne.n	80035bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800359a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40010400 	.word	0x40010400

080035ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a21      	ldr	r2, [pc, #132]	; (80036cc <TIM_OC3_SetConfig+0xe0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d003      	beq.n	8003652 <TIM_OC3_SetConfig+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <TIM_OC3_SetConfig+0xe4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10d      	bne.n	800366e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a16      	ldr	r2, [pc, #88]	; (80036cc <TIM_OC3_SetConfig+0xe0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_OC3_SetConfig+0x92>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <TIM_OC3_SetConfig+0xe4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d113      	bne.n	80036a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40010400 	.word	0x40010400

080036d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800371e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	031b      	lsls	r3, r3, #12
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <TIM_OC4_SetConfig+0xa4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC4_SetConfig+0x68>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a11      	ldr	r2, [pc, #68]	; (800377c <TIM_OC4_SetConfig+0xa8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40010400 	.word	0x40010400

08003780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e05a      	b.n	800389a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003830:	d01d      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10c      	bne.n	8003888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40010400 	.word	0x40010400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40001800 	.word	0x40001800

080038c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e03f      	b.n	800397e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fcc0 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800392e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fabd 	bl	8003eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	4613      	mov	r3, r2
 8003992:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d140      	bne.n	8003a22 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_UART_Receive_IT+0x26>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e039      	b.n	8003a24 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_UART_Receive_IT+0x38>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e032      	b.n	8003a24 <HAL_UART_Receive_IT+0x9e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2222      	movs	r2, #34	; 0x22
 80039e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0220 	orr.w	r2, r2, #32
 8003a1c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_UART_IRQHandler+0x52>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f996 	bl	8003dac <UART_Receive_IT>
      return;
 8003a80:	e0d1      	b.n	8003c26 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80b0 	beq.w	8003bea <HAL_UART_IRQHandler+0x1ba>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x70>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a5 	beq.w	8003bea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x90>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xb0>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	f043 0202 	orr.w	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_UART_IRQHandler+0xd0>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	f043 0204 	orr.w	r2, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <HAL_UART_IRQHandler+0xfa>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <HAL_UART_IRQHandler+0xee>
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d078      	beq.n	8003c24 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_UART_IRQHandler+0x11c>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f930 	bl	8003dac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_UART_IRQHandler+0x144>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d031      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f879 	bl	8003c6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d123      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b96:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <HAL_UART_IRQHandler+0x1fc>)
 8003ba6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe faf4 	bl	800219a <HAL_DMA_Abort_IT>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d016      	beq.n	8003be6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc6:	e00e      	b.n	8003be6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f845 	bl	8003c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bce:	e00a      	b.n	8003be6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f841 	bl	8003c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	e006      	b.n	8003be6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f83d 	bl	8003c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003be4:	e01e      	b.n	8003c24 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be6:	bf00      	nop
    return;
 8003be8:	e01c      	b.n	8003c24 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_UART_IRQHandler+0x1d6>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f866 	bl	8003cd0 <UART_Transmit_IT>
    return;
 8003c04:	e00f      	b.n	8003c26 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1f6>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8ae 	bl	8003d7c <UART_EndTransmit_IT>
    return;
 8003c20:	bf00      	nop
 8003c22:	e000      	b.n	8003c26 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c24:	bf00      	nop
  }
}
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08003ca9 	.word	0x08003ca9

08003c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff ffc8 	bl	8003c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b21      	cmp	r3, #33	; 0x21
 8003ce2:	d144      	bne.n	8003d6e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d11a      	bne.n	8003d24 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d02:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]
 8003d16:	e00e      	b.n	8003d36 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	e008      	b.n	8003d36 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6211      	str	r1, [r2, #32]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4619      	mov	r1, r3
 8003d44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ff47 	bl	8003c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b22      	cmp	r3, #34	; 0x22
 8003dbe:	d171      	bne.n	8003ea4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	d123      	bne.n	8003e12 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10e      	bne.n	8003df6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	1c9a      	adds	r2, r3, #2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
 8003df4:	e029      	b.n	8003e4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e10:	e01b      	b.n	8003e4a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6858      	ldr	r0, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	1c59      	adds	r1, r3, #1
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6291      	str	r1, [r2, #40]	; 0x28
 8003e2a:	b2c2      	uxtb	r2, r0
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e00c      	b.n	8003e4a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	1c58      	adds	r0, r3, #1
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	6288      	str	r0, [r1, #40]	; 0x28
 8003e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d120      	bne.n	8003ea0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0220 	bic.w	r2, r2, #32
 8003e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fed4 	bl	8003c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e002      	b.n	8003ea6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ef2:	f023 030c 	bic.w	r3, r3, #12
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	f040 818b 	bne.w	8004238 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4ac1      	ldr	r2, [pc, #772]	; (800422c <UART_SetConfig+0x37c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d005      	beq.n	8003f38 <UART_SetConfig+0x88>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4abf      	ldr	r2, [pc, #764]	; (8004230 <UART_SetConfig+0x380>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f040 80bd 	bne.w	80040b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe ff54 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	461d      	mov	r5, r3
 8003f42:	f04f 0600 	mov.w	r6, #0
 8003f46:	46a8      	mov	r8, r5
 8003f48:	46b1      	mov	r9, r6
 8003f4a:	eb18 0308 	adds.w	r3, r8, r8
 8003f4e:	eb49 0409 	adc.w	r4, r9, r9
 8003f52:	4698      	mov	r8, r3
 8003f54:	46a1      	mov	r9, r4
 8003f56:	eb18 0805 	adds.w	r8, r8, r5
 8003f5a:	eb49 0906 	adc.w	r9, r9, r6
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f72:	4688      	mov	r8, r1
 8003f74:	4691      	mov	r9, r2
 8003f76:	eb18 0005 	adds.w	r0, r8, r5
 8003f7a:	eb49 0106 	adc.w	r1, r9, r6
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	461d      	mov	r5, r3
 8003f84:	f04f 0600 	mov.w	r6, #0
 8003f88:	196b      	adds	r3, r5, r5
 8003f8a:	eb46 0406 	adc.w	r4, r6, r6
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	f7fc fd07 	bl	80009a4 <__aeabi_uldivmod>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <UART_SetConfig+0x384>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	461d      	mov	r5, r3
 8003fac:	f04f 0600 	mov.w	r6, #0
 8003fb0:	46a9      	mov	r9, r5
 8003fb2:	46b2      	mov	sl, r6
 8003fb4:	eb19 0309 	adds.w	r3, r9, r9
 8003fb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fbc:	4699      	mov	r9, r3
 8003fbe:	46a2      	mov	sl, r4
 8003fc0:	eb19 0905 	adds.w	r9, r9, r5
 8003fc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fdc:	4689      	mov	r9, r1
 8003fde:	4692      	mov	sl, r2
 8003fe0:	eb19 0005 	adds.w	r0, r9, r5
 8003fe4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	461d      	mov	r5, r3
 8003fee:	f04f 0600 	mov.w	r6, #0
 8003ff2:	196b      	adds	r3, r5, r5
 8003ff4:	eb46 0406 	adc.w	r4, r6, r6
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	f7fc fcd2 	bl	80009a4 <__aeabi_uldivmod>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	461a      	mov	r2, r3
 8004006:	4b8b      	ldr	r3, [pc, #556]	; (8004234 <UART_SetConfig+0x384>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a86      	ldr	r2, [pc, #536]	; (8004234 <UART_SetConfig+0x384>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004028:	4498      	add	r8, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	461d      	mov	r5, r3
 800402e:	f04f 0600 	mov.w	r6, #0
 8004032:	46a9      	mov	r9, r5
 8004034:	46b2      	mov	sl, r6
 8004036:	eb19 0309 	adds.w	r3, r9, r9
 800403a:	eb4a 040a 	adc.w	r4, sl, sl
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	eb19 0905 	adds.w	r9, r9, r5
 8004046:	eb4a 0a06 	adc.w	sl, sl, r6
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405e:	4689      	mov	r9, r1
 8004060:	4692      	mov	sl, r2
 8004062:	eb19 0005 	adds.w	r0, r9, r5
 8004066:	eb4a 0106 	adc.w	r1, sl, r6
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	461d      	mov	r5, r3
 8004070:	f04f 0600 	mov.w	r6, #0
 8004074:	196b      	adds	r3, r5, r5
 8004076:	eb46 0406 	adc.w	r4, r6, r6
 800407a:	461a      	mov	r2, r3
 800407c:	4623      	mov	r3, r4
 800407e:	f7fc fc91 	bl	80009a4 <__aeabi_uldivmod>
 8004082:	4603      	mov	r3, r0
 8004084:	460c      	mov	r4, r1
 8004086:	461a      	mov	r2, r3
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <UART_SetConfig+0x384>)
 800408a:	fba3 1302 	umull	r1, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2164      	movs	r1, #100	; 0x64
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a65      	ldr	r2, [pc, #404]	; (8004234 <UART_SetConfig+0x384>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 0207 	and.w	r2, r3, #7
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4442      	add	r2, r8
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e26f      	b.n	8004592 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7fe fe83 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80040b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	461d      	mov	r5, r3
 80040bc:	f04f 0600 	mov.w	r6, #0
 80040c0:	46a8      	mov	r8, r5
 80040c2:	46b1      	mov	r9, r6
 80040c4:	eb18 0308 	adds.w	r3, r8, r8
 80040c8:	eb49 0409 	adc.w	r4, r9, r9
 80040cc:	4698      	mov	r8, r3
 80040ce:	46a1      	mov	r9, r4
 80040d0:	eb18 0805 	adds.w	r8, r8, r5
 80040d4:	eb49 0906 	adc.w	r9, r9, r6
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ec:	4688      	mov	r8, r1
 80040ee:	4691      	mov	r9, r2
 80040f0:	eb18 0005 	adds.w	r0, r8, r5
 80040f4:	eb49 0106 	adc.w	r1, r9, r6
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	461d      	mov	r5, r3
 80040fe:	f04f 0600 	mov.w	r6, #0
 8004102:	196b      	adds	r3, r5, r5
 8004104:	eb46 0406 	adc.w	r4, r6, r6
 8004108:	461a      	mov	r2, r3
 800410a:	4623      	mov	r3, r4
 800410c:	f7fc fc4a 	bl	80009a4 <__aeabi_uldivmod>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	461a      	mov	r2, r3
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <UART_SetConfig+0x384>)
 8004118:	fba3 2302 	umull	r2, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	461d      	mov	r5, r3
 8004126:	f04f 0600 	mov.w	r6, #0
 800412a:	46a9      	mov	r9, r5
 800412c:	46b2      	mov	sl, r6
 800412e:	eb19 0309 	adds.w	r3, r9, r9
 8004132:	eb4a 040a 	adc.w	r4, sl, sl
 8004136:	4699      	mov	r9, r3
 8004138:	46a2      	mov	sl, r4
 800413a:	eb19 0905 	adds.w	r9, r9, r5
 800413e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004156:	4689      	mov	r9, r1
 8004158:	4692      	mov	sl, r2
 800415a:	eb19 0005 	adds.w	r0, r9, r5
 800415e:	eb4a 0106 	adc.w	r1, sl, r6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	461d      	mov	r5, r3
 8004168:	f04f 0600 	mov.w	r6, #0
 800416c:	196b      	adds	r3, r5, r5
 800416e:	eb46 0406 	adc.w	r4, r6, r6
 8004172:	461a      	mov	r2, r3
 8004174:	4623      	mov	r3, r4
 8004176:	f7fc fc15 	bl	80009a4 <__aeabi_uldivmod>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	461a      	mov	r2, r3
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <UART_SetConfig+0x384>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <UART_SetConfig+0x384>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a2:	4498      	add	r8, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	461d      	mov	r5, r3
 80041a8:	f04f 0600 	mov.w	r6, #0
 80041ac:	46a9      	mov	r9, r5
 80041ae:	46b2      	mov	sl, r6
 80041b0:	eb19 0309 	adds.w	r3, r9, r9
 80041b4:	eb4a 040a 	adc.w	r4, sl, sl
 80041b8:	4699      	mov	r9, r3
 80041ba:	46a2      	mov	sl, r4
 80041bc:	eb19 0905 	adds.w	r9, r9, r5
 80041c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d8:	4689      	mov	r9, r1
 80041da:	4692      	mov	sl, r2
 80041dc:	eb19 0005 	adds.w	r0, r9, r5
 80041e0:	eb4a 0106 	adc.w	r1, sl, r6
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461d      	mov	r5, r3
 80041ea:	f04f 0600 	mov.w	r6, #0
 80041ee:	196b      	adds	r3, r5, r5
 80041f0:	eb46 0406 	adc.w	r4, r6, r6
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	f7fc fbd4 	bl	80009a4 <__aeabi_uldivmod>
 80041fc:	4603      	mov	r3, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	461a      	mov	r2, r3
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <UART_SetConfig+0x384>)
 8004204:	fba3 1302 	umull	r1, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2164      	movs	r1, #100	; 0x64
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	3332      	adds	r3, #50	; 0x32
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <UART_SetConfig+0x384>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4442      	add	r2, r8
 8004228:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800422a:	e1b2      	b.n	8004592 <UART_SetConfig+0x6e2>
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4ad7      	ldr	r2, [pc, #860]	; (800459c <UART_SetConfig+0x6ec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d005      	beq.n	800424e <UART_SetConfig+0x39e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4ad6      	ldr	r2, [pc, #856]	; (80045a0 <UART_SetConfig+0x6f0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	f040 80d1 	bne.w	80043f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800424e:	f7fe fdc9 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8004252:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	469a      	mov	sl, r3
 8004258:	f04f 0b00 	mov.w	fp, #0
 800425c:	46d0      	mov	r8, sl
 800425e:	46d9      	mov	r9, fp
 8004260:	eb18 0308 	adds.w	r3, r8, r8
 8004264:	eb49 0409 	adc.w	r4, r9, r9
 8004268:	4698      	mov	r8, r3
 800426a:	46a1      	mov	r9, r4
 800426c:	eb18 080a 	adds.w	r8, r8, sl
 8004270:	eb49 090b 	adc.w	r9, r9, fp
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004280:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004284:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004288:	4688      	mov	r8, r1
 800428a:	4691      	mov	r9, r2
 800428c:	eb1a 0508 	adds.w	r5, sl, r8
 8004290:	eb4b 0609 	adc.w	r6, fp, r9
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4619      	mov	r1, r3
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0094      	lsls	r4, r2, #2
 80042a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ac:	008b      	lsls	r3, r1, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	4631      	mov	r1, r6
 80042b6:	f7fc fb75 	bl	80009a4 <__aeabi_uldivmod>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	461a      	mov	r2, r3
 80042c0:	4bb8      	ldr	r3, [pc, #736]	; (80045a4 <UART_SetConfig+0x6f4>)
 80042c2:	fba3 2302 	umull	r2, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	469b      	mov	fp, r3
 80042d0:	f04f 0c00 	mov.w	ip, #0
 80042d4:	46d9      	mov	r9, fp
 80042d6:	46e2      	mov	sl, ip
 80042d8:	eb19 0309 	adds.w	r3, r9, r9
 80042dc:	eb4a 040a 	adc.w	r4, sl, sl
 80042e0:	4699      	mov	r9, r3
 80042e2:	46a2      	mov	sl, r4
 80042e4:	eb19 090b 	adds.w	r9, r9, fp
 80042e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004300:	4689      	mov	r9, r1
 8004302:	4692      	mov	sl, r2
 8004304:	eb1b 0509 	adds.w	r5, fp, r9
 8004308:	eb4c 060a 	adc.w	r6, ip, sl
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	0094      	lsls	r4, r2, #2
 8004320:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	4628      	mov	r0, r5
 800432c:	4631      	mov	r1, r6
 800432e:	f7fc fb39 	bl	80009a4 <__aeabi_uldivmod>
 8004332:	4603      	mov	r3, r0
 8004334:	460c      	mov	r4, r1
 8004336:	461a      	mov	r2, r3
 8004338:	4b9a      	ldr	r3, [pc, #616]	; (80045a4 <UART_SetConfig+0x6f4>)
 800433a:	fba3 1302 	umull	r1, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2164      	movs	r1, #100	; 0x64
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	3332      	adds	r3, #50	; 0x32
 800434c:	4a95      	ldr	r2, [pc, #596]	; (80045a4 <UART_SetConfig+0x6f4>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004358:	4498      	add	r8, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	469b      	mov	fp, r3
 800435e:	f04f 0c00 	mov.w	ip, #0
 8004362:	46d9      	mov	r9, fp
 8004364:	46e2      	mov	sl, ip
 8004366:	eb19 0309 	adds.w	r3, r9, r9
 800436a:	eb4a 040a 	adc.w	r4, sl, sl
 800436e:	4699      	mov	r9, r3
 8004370:	46a2      	mov	sl, r4
 8004372:	eb19 090b 	adds.w	r9, r9, fp
 8004376:	eb4a 0a0c 	adc.w	sl, sl, ip
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004386:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800438a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800438e:	4689      	mov	r9, r1
 8004390:	4692      	mov	sl, r2
 8004392:	eb1b 0509 	adds.w	r5, fp, r9
 8004396:	eb4c 060a 	adc.w	r6, ip, sl
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4619      	mov	r1, r3
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	0094      	lsls	r4, r2, #2
 80043ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	4628      	mov	r0, r5
 80043ba:	4631      	mov	r1, r6
 80043bc:	f7fc faf2 	bl	80009a4 <__aeabi_uldivmod>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b77      	ldr	r3, [pc, #476]	; (80045a4 <UART_SetConfig+0x6f4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <UART_SetConfig+0x6f4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4442      	add	r2, r8
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	e0d0      	b.n	8004592 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe fce4 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80043f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	469a      	mov	sl, r3
 80043fa:	f04f 0b00 	mov.w	fp, #0
 80043fe:	46d0      	mov	r8, sl
 8004400:	46d9      	mov	r9, fp
 8004402:	eb18 0308 	adds.w	r3, r8, r8
 8004406:	eb49 0409 	adc.w	r4, r9, r9
 800440a:	4698      	mov	r8, r3
 800440c:	46a1      	mov	r9, r4
 800440e:	eb18 080a 	adds.w	r8, r8, sl
 8004412:	eb49 090b 	adc.w	r9, r9, fp
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004422:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004426:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800442a:	4688      	mov	r8, r1
 800442c:	4691      	mov	r9, r2
 800442e:	eb1a 0508 	adds.w	r5, sl, r8
 8004432:	eb4b 0609 	adc.w	r6, fp, r9
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	f04f 0400 	mov.w	r4, #0
 8004448:	0094      	lsls	r4, r2, #2
 800444a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800444e:	008b      	lsls	r3, r1, #2
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	4628      	mov	r0, r5
 8004456:	4631      	mov	r1, r6
 8004458:	f7fc faa4 	bl	80009a4 <__aeabi_uldivmod>
 800445c:	4603      	mov	r3, r0
 800445e:	460c      	mov	r4, r1
 8004460:	461a      	mov	r2, r3
 8004462:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <UART_SetConfig+0x6f4>)
 8004464:	fba3 2302 	umull	r2, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	469b      	mov	fp, r3
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	46d9      	mov	r9, fp
 8004478:	46e2      	mov	sl, ip
 800447a:	eb19 0309 	adds.w	r3, r9, r9
 800447e:	eb4a 040a 	adc.w	r4, sl, sl
 8004482:	4699      	mov	r9, r3
 8004484:	46a2      	mov	sl, r4
 8004486:	eb19 090b 	adds.w	r9, r9, fp
 800448a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800449e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a2:	4689      	mov	r9, r1
 80044a4:	4692      	mov	sl, r2
 80044a6:	eb1b 0509 	adds.w	r5, fp, r9
 80044aa:	eb4c 060a 	adc.w	r6, ip, sl
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4619      	mov	r1, r3
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	0094      	lsls	r4, r2, #2
 80044c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044c6:	008b      	lsls	r3, r1, #2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	4631      	mov	r1, r6
 80044d0:	f7fc fa68 	bl	80009a4 <__aeabi_uldivmod>
 80044d4:	4603      	mov	r3, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	461a      	mov	r2, r3
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <UART_SetConfig+0x6f4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <UART_SetConfig+0x6f4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fa:	4498      	add	r8, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	469b      	mov	fp, r3
 8004500:	f04f 0c00 	mov.w	ip, #0
 8004504:	46d9      	mov	r9, fp
 8004506:	46e2      	mov	sl, ip
 8004508:	eb19 0309 	adds.w	r3, r9, r9
 800450c:	eb4a 040a 	adc.w	r4, sl, sl
 8004510:	4699      	mov	r9, r3
 8004512:	46a2      	mov	sl, r4
 8004514:	eb19 090b 	adds.w	r9, r9, fp
 8004518:	eb4a 0a0c 	adc.w	sl, sl, ip
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004528:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800452c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004530:	4689      	mov	r9, r1
 8004532:	4692      	mov	sl, r2
 8004534:	eb1b 0509 	adds.w	r5, fp, r9
 8004538:	eb4c 060a 	adc.w	r6, ip, sl
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	0094      	lsls	r4, r2, #2
 8004550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	4628      	mov	r0, r5
 800455c:	4631      	mov	r1, r6
 800455e:	f7fc fa21 	bl	80009a4 <__aeabi_uldivmod>
 8004562:	4603      	mov	r3, r0
 8004564:	460c      	mov	r4, r1
 8004566:	461a      	mov	r2, r3
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <UART_SetConfig+0x6f4>)
 800456a:	fba3 1302 	umull	r1, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <UART_SetConfig+0x6f4>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4442      	add	r2, r8
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	e7ff      	b.n	8004592 <UART_SetConfig+0x6e2>
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	40011000 	.word	0x40011000
 80045a0:	40011400 	.word	0x40011400
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4e0d      	ldr	r6, [pc, #52]	; (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1ba4      	subs	r4, r4, r6
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2500      	movs	r5, #0
 80045b4:	42a5      	cmp	r5, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4e0b      	ldr	r6, [pc, #44]	; (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	; (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 f820 	bl	8004600 <_init>
 80045c0:	1ba4      	subs	r4, r4, r6
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2500      	movs	r5, #0
 80045c6:	42a5      	cmp	r5, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045d0:	4798      	blx	r3
 80045d2:	3501      	adds	r5, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045da:	4798      	blx	r3
 80045dc:	3501      	adds	r5, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08004638 	.word	0x08004638
 80045e4:	08004638 	.word	0x08004638
 80045e8:	08004638 	.word	0x08004638
 80045ec:	0800463c 	.word	0x0800463c

080045f0 <memset>:
 80045f0:	4402      	add	r2, r0
 80045f2:	4603      	mov	r3, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d100      	bne.n	80045fa <memset+0xa>
 80045f8:	4770      	bx	lr
 80045fa:	f803 1b01 	strb.w	r1, [r3], #1
 80045fe:	e7f9      	b.n	80045f4 <memset+0x4>

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
